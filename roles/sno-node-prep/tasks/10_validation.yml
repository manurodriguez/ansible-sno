---
- name: Check ansible version
  fail:
    msg: Use Ansible version 2.9 or greater to run this playbook
  when: ansible_version.full is version('2.9.0', '<')
  delegate_to: localhost
  tags:
  - always
  - validation
  - fully_disconnected

- name: Ensure Python libraries are installed
  python_requirements_info:
    dependencies:
    - netaddr
  register: _py_facts
  delegate_to: localhost
  tags:
  - always
  - validation

- name: Fail if Python modules are missing
  fail:
    msg: |
         Missing python module(s) {{ _py_facts.not_found }} on localhost
  when: _py_facts.not_found | length > 0
  tags:
  - always
  - validation

- name: Fail if version is undefined or empty.
  fail:
    msg: "The version is undefined or empty. Use a value such as 'latest-4.8' or an explicit version '4.8.2'."
  when: (version is undefined) or (version|length == 0)
  tags:
  - always
  - validation

- name: Fail if build is undefined or empty
  fail:
    msg: "The build is undefined or empty. Use a value such as 'dev' or 'ga'."
  when: (build is undefined) or (build|length == 0)
  tags:
  - always
  - validation

- name: Fail if a required install-config variable is undefined or empty.
  fail:
    msg: "A variable regarding install-config.yml is undefined or empty."
  when: (domain is undefined) or (domain|length == 0) or (cluster is undefined) or (cluster|length == 0) or (extcidrnet is undefined) or (extcidrnet|length == 0) or (pullsecret is undefined) or (pullsecret|length == 0)
  tags:
  - always
  - validation

- name: Set release_url for development envs
  set_fact:
    release_url: "{{ (webserver_url|length) | ternary(webserver_url, 'https://mirror.openshift.com/pub/openshift-v4/clients/ocp-dev-preview') }}"
  when: build == 'dev'
  tags:
  - always
  - validation

- name: Set release_url for GA envs
  set_fact:
    release_url: "{{ (webserver_url|length) | ternary(webserver_url, 'https://mirror.openshift.com/pub/openshift-v4/clients/ocp') }}"
  when: build == 'ga'
  tags:
  - always
  - validation

- name: Confirm whether or not internet connectivity on provisioner host
  uri:
    url: https://www.redhat.com
    status_code: [-1,200]
    timeout: 1
  register: check_url
  tags:
  - validation

- name: Fail when provision host no online access and registry host not creating registry (can't assume access)
  fail:
    msg: |
         A host with online access is required. Support for disconnected install is not added yet.
  when:
    - check_url.status == -1
    - webserver_url|length == 0

- name: Get Release.txt File
  uri:
    url: "{{ release_url }}/{{ version }}/release.txt"
    return_content: yes
  register: result
  until: result.status == 200
  retries: 6 # 1 minute (10 * 6)
  delay: 10 # Every 10 seconds
  failed_when: result.content|length == 0 or result.status >= 400
  tags:
  - always
  - validation

- name: Set Fact for Release Image
  set_fact:
    release_version: "{{ result.content | regex_search('Version:.*') | regex_replace('Version:\\s*(.*)', '\\1') }}"
    release_image: "{{ result.content | regex_search('Pull From:.*') | regex_replace('Pull From:\\s*(.*)', '\\1') }}"
  tags:
  - always
  - validation

- name: Get the release version
  debug:
    msg: "release version {{ release_version }}"
    verbosity: 2
  tags: validation

- name: Fail if dual-stack is requested and build does not support it
  fail:
    msg: This release {{ release_version }} does not support dual-stack deployments
  when: release_version[0]|int == 4 and release_version[2]|int < 6 and dualstack_baremetal
  tags:
  - always
  - validation

- name: Fail if dualstack_baremetal and ipv4_baremetal are both true
  fail:
    msg: Only one of ipv4_baremetal and dualstack_baremetal variables can be true
  when: ipv4_baremetal and dualstack_baremetal
  tags:
  - always
  - validation

- name: Check for valid extcidrnet (IPv4)
  fail:
    msg: extcidrnet should be a valid IPv4 CIDR
  when: not ipv6_enabled|bool and not extcidrnet|ipv4
  tags:
  - always
  - validation

- name: Check for valid extcidrnet (IPv6)
  fail:
    msg: extcidrnet6 should be a valid IPv6 address
  when: ipv6_enabled|bool and not (ipv4_baremetal or dualstack_baremetal) and not extcidrnet6|ipv6
  tags:
  - always
  - validation

- name: Check for valid extcidrnet and extcidrnet6 (Dual-Stack)
  fail:
    msg: extcidrnet should be a valid IPv4 address and extcidrnet6 should be a valid IPv6 address
  when: ipv6_enabled|bool and dualstack_baremetal|bool and not (extcidrnet|ipv4 and extcidrnet6|ipv6)
  tags:
  - always
  - validation

- name:  Gather the rpm package facts
  package_facts:
    manager: auto
  tags:
  - always
  - validation

- name: Set Fact for firewall variable
  set_fact:
    firewall: "iptables"
  when: "'iptables-services' in ansible_facts.packages"
  tags:
  - always
  - validation
